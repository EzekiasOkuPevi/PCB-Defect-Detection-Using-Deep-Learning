# -*- coding: utf-8 -*-
"""DeepPCB_to_YOLO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nMy3mNPwAkc8-PBPK0OhSyKPMBuZAHb2
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import shutil

# Define the source and destination directories
source_dir = "/content/drive/MyDrive/SMDHResearch/DeepPCB-master/DeepPCB-organized/DeepPCB/train/images/Test"
dest_dir = "/content/drive/MyDrive/SMDHResearch/DeepPCB-master/DeepPCB-organized/DeepPCB/train/PCBImages"

# Ensure the destination directory exists
os.makedirs(dest_dir, exist_ok=True)

# Iterate over the files in the source directory
for filename in os.listdir(source_dir):
    # Check if the file ends with '_temp'
    if filename.endswith("_temp"):
        # Construct the full file paths
        source_path = os.path.join(source_dir, filename)
        # Remove the '_temp' from the filename for the destination
        new_filename = filename.replace("_temp", "")
        dest_path = os.path.join(dest_dir, new_filename)

        # Copy the file to the destination with the new name
        shutil.copy(source_path, dest_path)
        print(f"Copied and renamed: {filename} -> {new_filename}")

print("All matching files have been copied and renamed.")

import os
import shutil


# Define the source and destination directories
source_dir = "/content/drive/MyDrive/SMDHResearch/DeepPCB-master/DeepPCB-organized/DeepPCB/test/images"
dest_dir = "/content/drive/MyDrive/SMDHResearch/DeepPCB-master/DeepPCB-organized/DeepPCB/train/PCBImages"

# Ensure the destination directory exists
os.makedirs(dest_dir, exist_ok=True)

# Iterate over the files in the source directory
for filename in os.listdir(source_dir):
    # Check if the file ends with '_temp.jpg'
    if filename.endswith("_temp.jpg"):
        # Construct the full file paths
        source_path = os.path.join(source_dir, filename)
        # Remove the '_temp' from the filename for the destination
        new_filename = filename.replace("_temp", "")
        dest_path = os.path.join(dest_dir, new_filename)

        # Copy the file to the destination with the new name
        shutil.copy(source_path, dest_path)
        print(f"Copied and renamed: {filename} -> {new_filename}")

print("All matching files have been copied and renamed.")

import os
import shutil


# Define the source and destination directories
source_dir = "/content/drive/MyDrive/SMDHResearch/DeepPCB-master/DeepPCB-organized/DeepPCB/test/images"
dest_dir = "/content/drive/MyDrive/SMDHResearch/DeepPCB-master/DeepPCB-organized/DeepPCB/train/PCBImages"

# Ensure the destination directory exists
os.makedirs(dest_dir, exist_ok=True)

# Iterate over the files in the source directory
for filename in os.listdir(source_dir):
    # Check if the file ends with '_temp.jpg'
    if filename.endswith("_temp.jpg"):
        # Construct the full file paths
        source_path = os.path.join(source_dir, filename)
        # Remove the '_temp' from the filename for the destination
        new_filename = filename.replace("_temp", "")
        dest_path = os.path.join(dest_dir, new_filename)

        # Copy the file to the destination with the new name
        shutil.copy(source_path, dest_path)
        print(f"Copied and renamed: {filename} -> {new_filename}")

print("All matching files have been copied and renamed.")

import os

def convert_to_yolo_all(input_dir, output_dir, image_width, image_height):
    """
    Converts all DeepPCB annotation files in a folder to YOLO format.

    :param input_dir: Directory containing DeepPCB annotation files.
    :param output_dir: Directory to save YOLO annotation files.
    :param image_width: Width of the images.
    :param image_height: Height of the images.
    """
    # Ensure the output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Iterate through all files in the input directory
    for file_name in os.listdir(input_dir):
        if file_name.endswith(".txt"):  # Process only .txt files
            input_file = os.path.join(input_dir, file_name)
            output_file = os.path.join(output_dir, file_name)

            with open(input_file, 'r') as f:
                lines = f.readlines()

            with open(output_file, 'w') as f:
                for line in lines:
                    x1, y1, x2, y2, class_id = map(int, line.strip().split())

                    # Calculate YOLO format values
                    center_x = (x1 + x2) / 2
                    center_y = (y1 + y2) / 2
                    width = x2 - x1
                    height = y2 - y1

                    center_x_normalized = center_x / image_width
                    center_y_normalized = center_y / image_height
                    width_normalized = width / image_width
                    height_normalized = height / image_height

                    # Write to YOLO format
                    f.write(f"{class_id} {center_x_normalized:.6f} {center_y_normalized:.6f} {width_normalized:.6f} {height_normalized:.6f}\n")

    print(f"Conversion completed. YOLO annotations saved in: {output_dir}")

# Example usage
input_directory = "/content/drive/MyDrive/SMDHResearch/DeepPCB-master/DeepPCB-organized/DeepPCB/train/annotations"  # Replace with your input folder path
output_directory = "/content/drive/MyDrive/SMDHResearch/DeepPCB-master/DeepPCB-organized/DeepPCB/train/PCBImages"  # Replace with your output folder path
image_width = 640  # Replace with your image width
image_height = 640  # Replace with your image height

convert_to_yolo_all(input_directory, output_directory, image_width, image_height)